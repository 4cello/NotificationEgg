platform: neopixelbus
variant: SK6812
type: GRBW
pin: ${pin}
num_leds: 35
name: "${devicename} Notification Light"
id: notification_light
entity_category: config
default_transition_length: 0s
flash_transition_length: 0.5s
effects:
  - addressable_lambda:
      name: "Notification Effect"
      update_interval: ${light_effect_interval}
      lambda: |-
        // ---------- CONFIG START -------------
        // Width of color spot in pixels
        #define COLOR_WIDTH 3

        // How far from the end should pixels begin to fade out?
        #define FADE_OUT 1

        // Brightness of each pixel in a color spot. Length must be == COLOR_WIDTH
        static const float COLOR_SHAPE[COLOR_WIDTH] = {64,128,64};

        // How many blank pixels between 2 notification spots?
        static const uint8_t BETWEEN_COLORS = 5;

        // How many blank pixels until starting over?
        static const uint8_t BETWEEN_CYCLES = 3*it.size();
        // ---------- CONFIG END ---------------

        // How many notification colors are there?
        static const uint8_t COLOR_COUNT = sizeof(id(colors)) / sizeof(Color*);

        // Counter for space between color segments
        static uint8_t cycles_until_next_color = 0;

        // Counter for width of color segments
        static uint8_t cycles_until_color_ends = COLOR_WIDTH;

        // Counter for current notification color
        static uint8_t notification_class = 0;

        // Should be named current_color, but that one is already taken :(
        static Color next_color;

        // shift every pixel over, fading out the last couple ones
        uint8_t px = it.size()-1;
        for (; px >= it.size()-FADE_OUT-1; px--) {
            it[px] = it[px-1].get().darken(255/FADE_OUT);
        }
        // shift the rest
        for (; px > 0; px--) {
            it[px] = it[px-1].get();
        }

        // now decide which color the first pixel will be
        if (cycles_until_next_color > 0) {
            // no color is being added
            it[0] = Color::BLACK;
            cycles_until_next_color--;
        } else {
            // there is currently a color being added
            time_t is_active = id(pending_notifications)[notification_class];
            if (is_active) {
            next_color = id(colors)[notification_class];
            } else {
            next_color = Color::BLACK;
            }
            it[0] = next_color.darken(255-COLOR_SHAPE[cycles_until_color_ends-1]);
            if (cycles_until_color_ends > 0) {
            // continue to finish this color
            cycles_until_color_ends--;
            } else {
            // prepare next color
            cycles_until_color_ends = COLOR_WIDTH;
            if (notification_class >= COLOR_COUNT-1) {
                // we're at notification_class >= COLOR_COUNT-1
                // reset notification_class and prepare for full cycle
                notification_class = 0;
                cycles_until_next_color = BETWEEN_CYCLES;
            } else {
                // we're at some notification_class < COLOR_COUNT - 1
                // find the next "non-empty" class
                notification_class++;
                for (; notification_class < COLOR_COUNT; notification_class++) {
                is_active = id(pending_notifications)[notification_class];
                if (is_active) {
                    break;
                }
                }
                if (notification_class < COLOR_COUNT && is_active) {
                // there is actually a "non-empty" class
                // set its color and prepare small spacing
                cycles_until_next_color = BETWEEN_COLORS;
                } else {
                // we arrived at notification_class == 0 without finding an active class
                // reset notification_class and prepare for full cycle
                notification_class = 0;
                cycles_until_next_color = BETWEEN_CYCLES;
                }
            }
            }
        }